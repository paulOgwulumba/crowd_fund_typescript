/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(uint64,address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "payIntoCrowdFund(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "triggerWithdrawal()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "terminateContract()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "viewTargetAmount()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "viewCurrentAmount()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "viewBeneficiary()address": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "beneficiary": {
          "type": "bytes",
          "key": "beneficiary"
        },
        "targetAmount": {
          "type": "uint64",
          "key": "targetAmount"
        },
        "currentAmount": {
          "type": "uint64",
          "key": "currentAmount"
        },
        "crowdFundOngoing": {
          "type": "bytes",
          "key": "crowdFundOngoing"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "CrowdFund",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "targetAmount",
            "type": "uint64"
          },
          {
            "name": "beneficiary",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "payIntoCrowdFund",
        "args": [
          {
            "name": "paymentTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "triggerWithdrawal",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "terminateContract",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "viewTargetAmount",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "viewCurrentAmount",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "viewBeneficiary",
        "args": [],
        "returns": {
          "type": "address"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the CrowdFund smart contract.
 */
export type CrowdFund = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64,address)void' | 'createApplication', {
      argsObj: {
        targetAmount: bigint | number
        beneficiary: string
      }
      argsTuple: [targetAmount: bigint | number, beneficiary: string]
      returns: void
    }>
    & Record<'payIntoCrowdFund(pay)void' | 'payIntoCrowdFund', {
      argsObj: {
        paymentTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [paymentTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'triggerWithdrawal()void' | 'triggerWithdrawal', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'terminateContract()void' | 'terminateContract', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'viewTargetAmount()uint64' | 'viewTargetAmount', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'viewCurrentAmount()uint64' | 'viewCurrentAmount', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'viewBeneficiary()address' | 'viewBeneficiary', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      beneficiary?: BinaryState
      targetAmount?: IntegerState
      currentAmount?: IntegerState
      crowdFundOngoing?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type CrowdFundSig = keyof CrowdFund['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends CrowdFundSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the CrowdFund smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends CrowdFundSig> = CrowdFund['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the CrowdFund smart contract to the method's return type
 */
export type MethodReturn<TSignature extends CrowdFundSig> = CrowdFund['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type CrowdFundCreateCalls = (typeof CrowdFundCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type CrowdFundCreateCallParams =
  | (TypedCallParams<'createApplication(uint64,address)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type CrowdFundDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: CrowdFundCreateCalls) => CrowdFundCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class CrowdFundCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the CrowdFund smart contract using the createApplication(uint64,address)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(uint64,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(uint64,address)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.targetAmount, args.beneficiary],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the payIntoCrowdFund(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static payIntoCrowdFund(args: MethodArgs<'payIntoCrowdFund(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'payIntoCrowdFund(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.paymentTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the triggerWithdrawal()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static triggerWithdrawal(args: MethodArgs<'triggerWithdrawal()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'triggerWithdrawal()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the terminateContract()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static terminateContract(args: MethodArgs<'terminateContract()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'terminateContract()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the viewTargetAmount()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static viewTargetAmount(args: MethodArgs<'viewTargetAmount()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'viewTargetAmount()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the viewCurrentAmount()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static viewCurrentAmount(args: MethodArgs<'viewCurrentAmount()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'viewCurrentAmount()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the viewBeneficiary()address ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static viewBeneficiary(args: MethodArgs<'viewBeneficiary()address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'viewBeneficiary()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the CrowdFund smart contract
 */
export class CrowdFundClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `CrowdFundClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof CrowdFund['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the CrowdFund smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: CrowdFundDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(CrowdFundCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the CrowdFund smart contract using the createApplication(uint64,address)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(uint64,address)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(uint64,address)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(CrowdFundCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the CrowdFund smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the payIntoCrowdFund(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public payIntoCrowdFund(args: MethodArgs<'payIntoCrowdFund(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CrowdFundCallFactory.payIntoCrowdFund(args, params))
  }

  /**
   * Calls the triggerWithdrawal()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public triggerWithdrawal(args: MethodArgs<'triggerWithdrawal()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CrowdFundCallFactory.triggerWithdrawal(args, params))
  }

  /**
   * Calls the terminateContract()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public terminateContract(args: MethodArgs<'terminateContract()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CrowdFundCallFactory.terminateContract(args, params))
  }

  /**
   * Calls the viewTargetAmount()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public viewTargetAmount(args: MethodArgs<'viewTargetAmount()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CrowdFundCallFactory.viewTargetAmount(args, params))
  }

  /**
   * Calls the viewCurrentAmount()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public viewCurrentAmount(args: MethodArgs<'viewCurrentAmount()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CrowdFundCallFactory.viewCurrentAmount(args, params))
  }

  /**
   * Calls the viewBeneficiary()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public viewBeneficiary(args: MethodArgs<'viewBeneficiary()address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(CrowdFundCallFactory.viewBeneficiary(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<CrowdFund['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get beneficiary() {
        return CrowdFundClient.getBinaryState(state, 'beneficiary')
      },
      get targetAmount() {
        return CrowdFundClient.getIntegerState(state, 'targetAmount')
      },
      get currentAmount() {
        return CrowdFundClient.getIntegerState(state, 'currentAmount')
      },
      get crowdFundOngoing() {
        return CrowdFundClient.getBinaryState(state, 'crowdFundOngoing')
      },
    }
  }

  public compose(): CrowdFundComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      payIntoCrowdFund(args: MethodArgs<'payIntoCrowdFund(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.payIntoCrowdFund(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      triggerWithdrawal(args: MethodArgs<'triggerWithdrawal()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.triggerWithdrawal(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      terminateContract(args: MethodArgs<'terminateContract()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.terminateContract(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      viewTargetAmount(args: MethodArgs<'viewTargetAmount()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.viewTargetAmount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      viewCurrentAmount(args: MethodArgs<'viewCurrentAmount()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.viewCurrentAmount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      viewBeneficiary(args: MethodArgs<'viewBeneficiary()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.viewBeneficiary(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as CrowdFundComposer
  }
}
export type CrowdFundComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the payIntoCrowdFund(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payIntoCrowdFund(args: MethodArgs<'payIntoCrowdFund(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CrowdFundComposer<[...TReturns, MethodReturn<'payIntoCrowdFund(pay)void'>]>

  /**
   * Calls the triggerWithdrawal()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  triggerWithdrawal(args: MethodArgs<'triggerWithdrawal()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CrowdFundComposer<[...TReturns, MethodReturn<'triggerWithdrawal()void'>]>

  /**
   * Calls the terminateContract()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  terminateContract(args: MethodArgs<'terminateContract()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CrowdFundComposer<[...TReturns, MethodReturn<'terminateContract()void'>]>

  /**
   * Calls the viewTargetAmount()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  viewTargetAmount(args: MethodArgs<'viewTargetAmount()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CrowdFundComposer<[...TReturns, MethodReturn<'viewTargetAmount()uint64'>]>

  /**
   * Calls the viewCurrentAmount()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  viewCurrentAmount(args: MethodArgs<'viewCurrentAmount()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CrowdFundComposer<[...TReturns, MethodReturn<'viewCurrentAmount()uint64'>]>

  /**
   * Calls the viewBeneficiary()address ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  viewBeneficiary(args: MethodArgs<'viewBeneficiary()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): CrowdFundComposer<[...TReturns, MethodReturn<'viewBeneficiary()address'>]>

  /**
   * Makes a clear_state call to an existing instance of the CrowdFund smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): CrowdFundComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): CrowdFundComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<CrowdFundComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<CrowdFundComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type CrowdFundComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type CrowdFundComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
